(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{345:function(t,s,a){t.exports=a.p+"assets/img/java-collection-hierarchy.e738158e.png"},346:function(t,s,a){t.exports=a.p+"assets/img/java-map-hierarchy.266967f7.png"},347:function(t,s,a){t.exports=a.p+"assets/img/kotlin-collection-hierarchy.a8a4ee89.png"},379:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"java-kotlin-集合类梳理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java-kotlin-集合类梳理"}},[t._v("#")]),t._v(" Java/kotlin 集合类梳理")]),t._v(" "),n("p",[t._v("上次被人问了一些java集合类相关问题，太久没写java（大概快一年没写）记忆模糊，所以结合kotlin集合类来整理一下。")]),t._v(" "),n("h2",{attrs:{id:"集合是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#集合是什么"}},[t._v("#")]),t._v(" 集合是什么")]),t._v(" "),n("p",[t._v("编程语言里的所谓集合，不仅支持了一组元素的存储，还定义了这些元素的相关操作（比如搜索，排序，插入删除）。")]),t._v(" "),n("p",[t._v("java为集合提供了Set, List, Queue, Deque（双端队列等）等接口，和ArrayList, Vector, LinkedList, PriorityQueue, HashSet, LinkedHashSet, TreeSet等类。")]),t._v(" "),n("h2",{attrs:{id:"java集合的层次结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java集合的层次结构"}},[t._v("#")]),t._v(" java集合的层次结构")]),t._v(" "),n("p",[n("img",{attrs:{src:a(345),alt:"java-collection-hierarchy"}})]),t._v(" "),n("p",[t._v("可以看出先定义了Iterable，Iterable接口被Collection继承，Collection接口再被List，Queue，Set三大接口继承，最后他们的子类实现这些接口，最后就有了我们常用的java集合类。")]),t._v(" "),n("h3",{attrs:{id:"list接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#list接口"}},[t._v("#")]),t._v(" List接口")]),t._v(" "),n("p",[t._v("List接口让子类可以有序地存储对象。并且这些对象是可重复的。")]),t._v(" "),n("p",[t._v("List接口由ArrayList, LinkedList, Vector, 和 Stack实现。")]),t._v(" "),n("h4",{attrs:{id:"arraylist类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#arraylist类"}},[t._v("#")]),t._v(" ArrayList类")]),t._v(" "),n("p",[t._v("ArrayList使用了"),n("strong",[t._v("动态数组")]),t._v("来存储不同的数据类型的元素。ArrayList总是保持插入顺序，并且这个过程是"),n("strong",[t._v("不同步")]),t._v("的（non-synchronized）。存储的元素可以被随机访问。")]),t._v(" "),n("h4",{attrs:{id:"linkedlist类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#linkedlist类"}},[t._v("#")]),t._v(" LinkedList类")]),t._v(" "),n("p",[t._v("LinkedList则使用"),n("strong",[t._v("双向链表")]),t._v("来存储元素。LinkedList同样总是保持插入顺序，并且这个过程也是"),n("strong",[t._v("不同步")]),t._v("的。")]),t._v(" "),n("p",[t._v("LinkedList相关操作非常快，因为其不需要像动态数组一样移位。")]),t._v(" "),n("h4",{attrs:{id:"vector类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vector类"}},[t._v("#")]),t._v(" Vector类")]),t._v(" "),n("p",[t._v("Vector同样使用动态数组来存储数据元素。但是它是"),n("strong",[t._v("同步")]),t._v("的。")]),t._v(" "),n("h4",{attrs:{id:"stack类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#stack类"}},[t._v("#")]),t._v(" Stack类")]),t._v(" "),n("p",[t._v("Stack实际上是Vector的子类。它实现了先进后出的结构。")]),t._v(" "),n("p",[t._v("操作函数push（塞入），pop（弹出），peek（读取）。例如：")]),t._v(" "),n("div",{staticClass:"language-kotlin extra-class"},[n("pre",{pre:!0,attrs:{class:"language-kotlin"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" stack"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Stack"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("String"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    stack"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"AAA"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"BBB"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"CCC"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("peek")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"--------"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    stack"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("pop")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" stack"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("打印：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("CCC\n--------\nAAA\nBBB\n")])])]),n("h3",{attrs:{id:"queue接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#queue接口"}},[t._v("#")]),t._v(" Queue接口")]),t._v(" "),n("p",[t._v("Queue接口定义了先入先出的顺序。它可以被视为一系列待按顺序处理的元素的列表。PriorityQueue, Deque, and ArrayDeque实现了Queue接口\nQueue接口定义了先入先出的顺序。它可以被视为一系列待按顺序处理的元素的列表。PriorityQueue, Deque, and ArrayDeque实现了Queue接口")]),t._v(" "),n("h4",{attrs:{id:"priorityqueue类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#priorityqueue类"}},[t._v("#")]),t._v(" PriorityQueue类")]),t._v(" "),n("p",[t._v("PriorityQueue按照所存储元素的优先级处理元素。它不允许在其中存储空值。")]),t._v(" "),n("p",[t._v("常用操作add，element（用于访问下一个队列元素，队列为空访问抛出异常），peek（访问，队列为空不抛异常），remove（访问并移除下一个队列元素，队列为空抛出异常），poll（访问并移除下一个队列元素，队列为空不抛出异常）")]),t._v(" "),n("p",[t._v("例如：")]),t._v(" "),n("div",{staticClass:"language-kotlin extra-class"},[n("pre",{pre:!0,attrs:{class:"language-kotlin"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" queue"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("PriorityQueue"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("String"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    queue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"AAA"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"BBB"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"CCC"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"DDD"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"------"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("queue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("element")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("queue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("peek")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"------"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" queue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    queue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    queue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("poll")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"------"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" queue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("打印：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("------\nAAA\nAAA\n------\nAAA\nBBB\nCCC\nDDD\n------\nCCC\nDDD\n")])])]),n("h3",{attrs:{id:"deque接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#deque接口"}},[t._v("#")]),t._v(" Deque接口")]),t._v(" "),n("p",[t._v("Deque接口继承了Queue接口。在Deque中，我们可以在Queue两端操作元素。")]),t._v(" "),n("h4",{attrs:{id:"arraydeque类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#arraydeque类"}},[t._v("#")]),t._v(" ArrayDeque类")]),t._v(" "),n("p",[t._v("ArrayDeque类实现了Deque接口。它比ArrayList和Stack更快，并且没有容量限制。")]),t._v(" "),n("h3",{attrs:{id:"set接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#set接口"}},[t._v("#")]),t._v(" Set接口")]),t._v(" "),n("p",[t._v("set接口代表无序的元素集，且"),n("strong",[t._v("不允许存储重复的项")]),t._v("。因此在Set中最多允许存放一个空值。HashSet, LinkedHashSet, 和 TreeSet实现了set接口。")]),t._v(" "),n("h4",{attrs:{id:"hashset类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hashset类"}},[t._v("#")]),t._v(" HashSet类")]),t._v(" "),n("p",[t._v("HashSet使用哈希表进行集合的存储。")]),t._v(" "),n("h4",{attrs:{id:"linkedhashset类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#linkedhashset类"}},[t._v("#")]),t._v(" LinkedHashSet类")]),t._v(" "),n("p",[t._v("LinkedHashSet类是Set接口的链表实现。它继承了HashSet类。它保持了插入顺序和空元素。")]),t._v(" "),n("h3",{attrs:{id:"sortedset接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sortedset接口"}},[t._v("#")]),t._v(" SortedSet接口")]),t._v(" "),n("p",[t._v("SortedSet是Set接口的替代。SortedSet的元素以升序排列。")]),t._v(" "),n("h4",{attrs:{id:"treeset类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#treeset类"}},[t._v("#")]),t._v(" TreeSet类")]),t._v(" "),n("p",[t._v("Java的TreeSet类实现了Set接口，使用树这种数据结构来存储数据。TreeSet的访问和遍历时间非常快速。TreeSet的元素以升序排列。")]),t._v(" "),n("h3",{attrs:{id:"map接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#map接口"}},[t._v("#")]),t._v(" Map接口")]),t._v(" "),n("p",[t._v("map表示一组键值对。每个键值对被称为一个entry（条目）。map的键是唯一的。")]),t._v(" "),n("p",[t._v("如果需要根据键搜索更新删除元素，map会很方便。")]),t._v(" "),n("h4",{attrs:{id:"map的结构层次"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#map的结构层次"}},[t._v("#")]),t._v(" Map的结构层次")]),t._v(" "),n("p",[t._v("有两个接口继承了Map接口:Map和SortedMap。\n三个类：HashMap, LinkedHashMap, 和TreeMap。")]),t._v(" "),n("p",[t._v("注意map不是由collection接口继承而来。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(346),alt:"java-map-hierarchy"}})]),t._v(" "),n("p",[t._v("map里的键是唯一的，但是值不是唯一的。\nHashMap和LinkedHashMap运行空值，但是TreeMap不允许空值。")]),t._v(" "),n("p",[t._v("Map不可以被遍历，可以使用keySet()和entrySet() 转换它到Set。")]),t._v(" "),n("blockquote",[n("p",[t._v("HashMap的实现参见"),n("a",{attrs:{href:"https://www.javatpoint.com/working-of-hashmap-in-java",target:"_blank",rel:"noopener noreferrer"}},[t._v("Working of HashMap in Java"),n("OutboundLink")],1),t._v("，非常简单的哈希散列原理，解决哈希冲突的方法是：以链表的形式连接上一个冲突节点")])]),t._v(" "),n("h4",{attrs:{id:""}},[n("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),n("h2",{attrs:{id:"kotlin集合"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#kotlin集合"}},[t._v("#")]),t._v(" kotlin集合")]),t._v(" "),n("p",[t._v("kotlin集合的set, list, 和map由一对接口组成。")]),t._v(" "),n("ul",[n("li",[t._v("read-only（只读）接口只提供了集合元素的访问方法")]),t._v(" "),n("li",[t._v("mutable（可写）接口继承了相应的read-only接口，带有可写的方法，增加，删除或是修改集合的元素。")])]),t._v(" "),n("p",[t._v("需要注意的是mutable集合不需要被var修饰：写操作只会更改同一mutable集合对象，集合的引用不会发生更改。")]),t._v(" "),n("p",[t._v("read-only集合类型是"),n("strong",[t._v("covariant/协变")]),t._v("的。这意味着如果Rectangle类从Shape继承，则可以在需要"),n("code",[t._v("List <Shape>")]),t._v("的任何地方使用"),n("code",[t._v("List <Rectangle>")]),t._v("。换句话讲，集合的元素类型可以是某个父类型的任意的子类型。")]),t._v(" "),n("p",[t._v("Map只有在value的类型上是协变的，在key的类型上不是协变的。")]),t._v(" "),n("p",[t._v("反之，mutable集合"),n("strong",[t._v("不是协变的")]),t._v("，否则会导致运行时错误。如果"),n("code",[t._v("Rectangle")]),t._v("是"),n("code",[t._v("Shape")]),t._v("的子类型，在要求"),n("code",[t._v("MutableList <Shape>")]),t._v("的类型中插入其他的shape的子类型（"),n("code",[t._v("MutableList <Rectangle>")]),t._v("），会导致运行时错误。")]),t._v(" "),n("p",[t._v("有点复杂，举个栗子就比较清楚：")]),t._v(" "),n("div",{staticClass:"language-kotlin extra-class"},[n("pre",{pre:!0,attrs:{class:"language-kotlin"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("open")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" Shape\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" Rectangle"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Shape")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" Circle"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Shape")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("List"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Shape"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mlist"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("MutableList"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Shape"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" list"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("listOf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rectangle")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Circle")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//ok!")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" mlist"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("mutableListOf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rectangle")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mlist"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Error!")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("kotlin集合的结构层次如下图所示：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(347),alt:"kotlin-collection-hierarchy"}})]),t._v(" "),n("p",[t._v("可以看到和java结构差不多，但是多了一个继承自Iterable接口的MutableIterable，和继承自MutableIterable和Collection接口的MutableCollection接口。")]),t._v(" "),n("p",[t._v("因此"),n("code",[t._v("Collection")]),t._v("可以作为适用于不同集合类型的函数的参数类型。如果需要特殊说明，再使用List或Set。看一个官网的例子：")]),t._v(" "),n("div",{staticClass:"language-kotlin extra-class"},[n("pre",{pre:!0,attrs:{class:"language-kotlin"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printAll")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("strings"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Collection"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("String"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" strings"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),n("span",{pre:!0,attrs:{class:"token interpolation variable"}},[t._v("$s")]),t._v(' "')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" stringList "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("listOf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"one"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"two"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"one"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printAll")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stringList"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" stringSet "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setOf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"one"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"two"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"three"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printAll")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stringSet"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//均可正常打印出值")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("通过kotlin的操作符重载可以轻松操作不同集合里的元素，比如下面这个例子里用"),n("code",[t._v("-=")]),t._v("去求出了    "),n("code",[t._v("MutableList<String>")]),t._v("类型的对象和"),n("code",[t._v("Set<String>")]),t._v("类型的对象的差集。")]),t._v(" "),n("div",{staticClass:"language-kotlin extra-class"},[n("pre",{pre:!0,attrs:{class:"language-kotlin"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//给List<String>类型添加了一个扩展方法，作用是排除列表中低于指定长度和指定的词汇")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" List"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("String"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getShortWordsTo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shortWords"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" MutableList"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("String"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" maxLength"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Int"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将调用对象（List<String>）内低于maxLength长度的词汇排除，并将剩余词汇写入shortWords")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("filterTo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shortWords"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" it"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" maxLength "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// throwing away the articles")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" articles "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setOf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"an"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"An"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"the"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//排除指定集合的单词")]),t._v("\n    shortWords "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" articles\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" words "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A long time ago in a galaxy far far away"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" shortWords "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mutableListOf"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("String"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    words"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getShortWordsTo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shortWords"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shortWords"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"list-set-map的相等判定与默认实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#list-set-map的相等判定与默认实现"}},[t._v("#")]),t._v(" List/Set/Map的相等判定与默认实现")]),t._v(" "),n("h4",{attrs:{id:"list类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#list类"}},[t._v("#")]),t._v(" List类")]),t._v(" "),n("p",[t._v("kotlin List的操作非常简单，但要注意两个List只要有相同元素且以相同顺序存储，便可认定为相同的List。")]),t._v(" "),n("p",[t._v("List的默认实现是ArrayList，可以视为可调整大小的数组。")]),t._v(" "),n("h4",{attrs:{id:"set类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#set类"}},[t._v("#")]),t._v(" Set类")]),t._v(" "),n("p",[t._v("kotlin的Set的判定相等条件是：大小相同，且各元素相同。（不需要顺序一样）。")]),t._v(" "),n("p",[t._v("Set在kotlin中的默认实现是LinkedHashSet，它保留了元素插入的顺序，因此依赖顺序的函数在set类上是可用的（如first（），last（））。")]),t._v(" "),n("div",{staticClass:"language-kotlin extra-class"},[n("pre",{pre:!0,attrs:{class:"language-kotlin"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" numbers "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setOf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// LinkedHashSet is the default implementation")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" numbersBackwards "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setOf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("numbers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("first")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" numbersBackwards"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("first")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("numbers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("first")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" numbersBackwards"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("last")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("一个替代实现是HashSet，它不保留插入顺序，所以它不能调用上述函数。HashSet可以使用更小的内存来存储相同的元素。")]),t._v(" "),n("h4",{attrs:{id:"map类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#map类"}},[t._v("#")]),t._v(" Map类")]),t._v(" "),n("p",[t._v("kotlin中Map相等的条件是他们都有相同的键值对（顺序无关）。")]),t._v(" "),n("p",[t._v("Map的默认实现是LinkedHashMap，它同样保留了插入顺序。")]),t._v(" "),n("p",[t._v("另一个替代实现是HashMap，不保留插入顺序。")])])}),[],!1,null,null,null);s.default=e.exports}}]);