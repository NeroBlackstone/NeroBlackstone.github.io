(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{402:function(t,a,s){"use strict";s.r(a);var n=s(14),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"在java-kotlin中使用uuid"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在java-kotlin中使用uuid"}},[t._v("#")]),t._v(" 在java/kotlin中使用UUID")]),t._v(" "),s("p",[t._v("UUID(Universally Unique Identifier)，也被称为GUID（Globally Unique Identifier）代表了"),s("strong",[t._v("一个128位的值，具有唯一性。")]),t._v(" UUID使用十六进制数字（8字节）为标准表示：")]),t._v(" "),s("blockquote",[s("p",[t._v("123e4567-e89b-12d3-a456-556642440000")])]),t._v(" "),s("p",[t._v('UUID由32个16进制数字与4个"-"符号组成，'),s("strong",[t._v("总共是36个字符。")]),t._v(" 而Nil UUID是UUID的特殊形式，所有位均为0。")]),t._v(" "),s("p",[t._v("这篇文章将介绍如何在kotlin/java中使用UUID。")]),t._v(" "),s("h2",{attrs:{id:"uuid结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#uuid结构"}},[t._v("#")]),t._v(" UUID结构")]),t._v(" "),s("p",[t._v("先看一下这个示例UUID：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("123e4567-e89b-42d3-a456-556642440000\nxxxxxxxx-xxxx-Bxxx-Axxx-xxxxxxxxxxxx\n")])])]),s("p",[t._v("A代表了决定UUID布局的变体（variant）。UUID中的其他位取决于变量字段的比特位设置。变体由A的3个最高有效位（most significant bit，简称MBS，是指一个n位二进制数字中的n-1位）决定，（后跟13-15 bits 时钟序列） ：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("MSB1")]),t._v(" "),s("th",[t._v("MSB2")]),t._v(" "),s("th",[t._v("MSB3")]),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("0")]),t._v(" "),s("td",[t._v("X")]),t._v(" "),s("td",[t._v("X")]),t._v(" "),s("td",[t._v("reserved (0)")])]),t._v(" "),s("tr",[s("td",[t._v("1")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("X")]),t._v(" "),s("td",[t._v("current variant (2)")])]),t._v(" "),s("tr",[s("td",[t._v("1")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("reserved for Microsoft (6)")])]),t._v(" "),s("tr",[s("td",[t._v("1")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("reserved for future (7)")])])])]),t._v(" "),s("p",[t._v("上面UUID中A的值为'a'，二进制等效于1010，但是我们只需要取前面不同的两位也就是10xx，也就是变体为2。B的值代表版本。上面UUID的版本是4。")]),t._v(" "),s("p",[t._v("java提供了取得UUID中变体和版本的方法：")]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" variant "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" uuid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("variant")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" version "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" uuid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("变体2的UUID有5个不同的版本：基于时间生成的UUIDv1，基于DCE安全生成的UUIDv2，基于名称生成的UUIDv3和UUIDv5，随机生成的UUIDv4。")]),t._v(" "),s("p",[t._v("Java提供了v3和v4的实现，但是也提供了用于生成任何类型UUID的构造函数。")]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" uuid"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("UUID")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mostSigBits"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("Long"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("leastSigBits"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("Long"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"版本3和版本5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#版本3和版本5"}},[t._v("#")]),t._v(" 版本3和版本5")]),t._v(" "),s("p",[t._v("UUID是使用命名空间和名称的哈希决定的。UUID的命名空间标识符（namespace identifiers）可以是诸如域名系统DNS，或是URL，还可以是对象标识符OIDs(Object Identifiers)。")]),t._v(" "),s("blockquote",[s("p",[t._v("UUID = hash(NAMESPACE_IDENTIFIER + NAME)")])]),t._v(" "),s("p",[t._v("在UUIDv3和UUIDv5的唯一区别是哈希算法： v3使用MD5(128位)然而v5使用了SHA-1（160位）。")]),t._v(" "),s("p",[t._v("简单来讲，这两个版本的UUID就是将哈希结果值截断为128位，然后替换掉4比特来表示版本，和2比特表示变体。")]),t._v(" "),s("p",[t._v("下面的代码用于生成v3版本的UUID：")]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" source"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" namespace "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" name\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" bytes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" source"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toByteArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("charset")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"UTF-8"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" uuid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" UUID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("nameUUIDFromBytes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bytes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("注意java只提供了v3和v4的实现，v5没有提供。")]),t._v(" "),s("h2",{attrs:{id:"版本4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#版本4"}},[t._v("#")]),t._v(" 版本4")]),t._v(" "),s("p",[t._v("UUIDv4的使用随机数字生成。java使用了SecureRandom来实现UUID生成，以不可用预测的值作为种子来产生随机数，以降低重复的可能性。下面是生成v4 UUID的方法：")]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" uuid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" UUID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("randomUUID")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("实践中，可以使用'SHA-256'和随机UUID来产生唯一的键值：")]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" salt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" MessageDigest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"SHA-256"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nsalt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UUID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("randomUUID")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toByteArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("charset")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"UTF-8"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将byte array转为16进制字符串")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//X 表示以十六进制形式输出 02 表示不足两位,前面补0输出")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" digest "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" salt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("digest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("joinToString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%02x"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("format")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("UUIDv3和UUIDv5有一个非常好的特性：在相同的命名空间和相同的名称下，就可以生成相同的UUID。")])])}),[],!1,null,null,null);a.default=e.exports}}]);