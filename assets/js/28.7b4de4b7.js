(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{387:function(e,a,t){"use strict";t.r(a);var v=t(14),s=Object(v.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"简单了解java8的元空间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简单了解java8的元空间"}},[e._v("#")]),e._v(" 简单了解Java8的元空间")]),e._v(" "),t("p",[e._v("元空间（Metaspace）是java8引入的新的内存空间，用于存储类的元信息。"),t("strong",[e._v("它取代了老的永久代(PermGen)。元空间存放在可自动增长的本地内存中(Natice memory)")]),e._v(" ，并且引入了新的选项：")]),e._v(" "),t("ul",[t("li",[t("em",[e._v("MetaspaceSize")]),e._v(" 和 "),t("em",[e._v("MaxMetaspaceSize")]),e._v(" 可以设置元空间的容量上限。")]),e._v(" "),t("li",[t("em",[e._v("MinMetaspaceFreeRatio")]),e._v(" 是指GC后，最小可用的类元数据占比。")]),e._v(" "),t("li",[t("em",[e._v("MaxMetaspaceFreeRatio")]),e._v(" 指GC后，为避免元空间减少，最大可用的类元数据占比。")])]),e._v(" "),t("p",[e._v("新的元空间也有益于GC。一旦类的元数据使用量达到元空间的最大值，GC可以自动触发清理无用的类。")]),e._v(" "),t("p",[e._v("因此，"),t("strong",[e._v("元空间的出现，让JVM降低了发生OutOfMemory错误的几率。")]),e._v(" 不过尽管有这些改进，但是依然需要监视和优化元空间以防潜在的内存泄露。")])])}),[],!1,null,null,null);a.default=s.exports}}]);